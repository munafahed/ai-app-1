/**
 * Flutter Project Template Generator (Web-Only)
 * 
 * This file generates a complete Flutter project structure optimized for web deployment.
 * Android and iOS support will be added in future versions.
 */

export interface FlutterProjectTemplate {
  files: Array<{
    path: string;
    content: string;
  }>;
}

export function generateFlutterProjectTemplate(appName: string): FlutterProjectTemplate {
  const packageName = appName.toLowerCase().replace(/[^a-z0-9]/g, '_');
  
  const files = [
    // Root level files
    {
      path: 'pubspec.yaml',
      content: `name: ${packageName}
description: "A new Flutter project generated by Genius APPio."
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

version: 1.0.0+1

environment:
  sdk: '>=3.0.0 <4.0.0'

dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.2

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0

flutter:
  uses-material-design: true
`
    },
    {
      path: 'lib/main.dart',
      content: `import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: '${appName}',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: '${appName}'),
      debugShowCheckedModeBanner: false,
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(widget.title),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              'Welcome to your new Flutter app!',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.w500),
            ),
            const SizedBox(height: 20),
            const Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ),
    );
  }
}
`
    },
    {
      path: '.gitignore',
      content: `# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.buildlog/
.history
.svn/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
#.vscode/

# Flutter/Dart/Pub related
**/doc/api/
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.packages
.pub-cache/
.pub/
/build/

# Web related
lib/generated_plugin_registrant.dart

# Symbolication related
app.*.symbols

# Obfuscation related
app.*.map.json
`
    },
    {
      path: '.metadata',
      content: `# This file tracks properties of this Flutter project.
# Used by Flutter tool to assess capabilities and perform upgrades etc.
#
# This file should be version controlled and should not be manually edited.

version:
  revision: "f1c077d8b8cf71dc0ca93d3b1d8db33b9b6de156"
  channel: "stable"

project_type: app

# Tracks metadata for the flutter migrate command
migration:
  platforms:
    - platform: root
      create_revision: f1c077d8b8cf71dc0ca93d3b1d8db33b9b6de156
      base_revision: f1c077d8b8cf71dc0ca93d3b1d8db33b9b6de156
    - platform: web
      create_revision: f1c077d8b8cf71dc0ca93d3b1d8db33b9b6de156
      base_revision: f1c077d8b8cf71dc0ca93d3b1d8db33b9b6de156

# User provided section

# List of Local paths (relative to this file) that should be
# ignored by the migrate tool.
#
# Files that are not part of the templates will be ignored by default.
unmanaged_files:
  - 'lib/main.dart'
`
    },
    
    // Web platform files
    {
      path: 'web/index.html',
      content: `<!DOCTYPE html>
<html>
<head>
  <!--
    If you are serving your web app in a path other than the root, change the
    href value below to reflect the base path you are serving from.

    The path provided below has to start and end with a slash "/" in order for
    it to work correctly.

    For more details:
    * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base

    This is a placeholder for base href that will be replaced by the value of
    the \`--base-href\` argument provided to \`flutter build\`.
  -->
  <base href="$FLUTTER_BASE_HREF">

  <meta charset="UTF-8">
  <meta content="IE=Edge" http-equiv="X-UA-Compatible">
  <meta name="description" content="A new Flutter project.">

  <!-- iOS meta tags & icons -->
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  <meta name="apple-mobile-web-app-title" content="${packageName}">
  <link rel="apple-touch-icon" href="icons/Icon-192.png">

  <!-- Favicon -->
  <link rel="icon" type="image/png" href="favicon.png"/>

  <title>${packageName}</title>
  <link rel="manifest" href="manifest.json">

  <script>
    // The value below is injected by flutter build, do not touch.
    var serviceWorkerVersion = null;
  </script>
  <!-- This script adds the flutter initialization JS code -->
  <script src="flutter.js" defer></script>
</head>
<body>
  <script>
    window.addEventListener('load', function(ev) {
      // Download main.dart.js
      _flutter.loader.loadEntrypoint({
        serviceWorker: {
          serviceWorkerVersion: serviceWorkerVersion,
        },
        onEntrypointLoaded: function(engineInitializer) {
          engineInitializer.initializeEngine().then(function(appRunner) {
            appRunner.runApp();
          });
        }
      });
    });
  </script>
</body>
</html>
`
    },
    {
      path: 'web/manifest.json',
      content: `{
    "name": "${appName}",
    "short_name": "${packageName}",
    "start_url": ".",
    "display": "standalone",
    "background_color": "#0175C2",
    "theme_color": "#0175C2",
    "description": "A new Flutter project.",
    "orientation": "portrait-primary",
    "prefer_related_applications": false,
    "icons": [
        {
            "src": "icons/Icon-192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-512.png",
            "sizes": "512x512",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-maskable-192.png",
            "sizes": "192x192",
            "type": "image/png",
            "purpose": "maskable"
        },
        {
            "src": "icons/Icon-maskable-512.png",
            "sizes": "512x512",
            "type": "image/png",
            "purpose": "maskable"
        }
    ]
}
`
    },
    {
      path: 'web/favicon.png',
      content: '# Placeholder for favicon.png - would be a binary image file'
    },
    {
      path: 'web/icons/Icon-192.png',
      content: '# Placeholder for 192x192 app icon - would be a binary image file'
    },
    {
      path: 'web/icons/Icon-512.png',
      content: '# Placeholder for 512x512 app icon - would be a binary image file'
    },
    {
      path: 'web/icons/Icon-maskable-192.png',
      content: '# Placeholder for 192x192 maskable app icon - would be a binary image file'
    },
    {
      path: 'web/icons/Icon-maskable-512.png',
      content: '# Placeholder for 512x512 maskable app icon - would be a binary image file'
    },
    
    // Test files
    {
      path: 'test/widget_test.dart',
      content: `// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:${packageName}/main.dart';

void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });
}
`
    },
    
    // Analysis options
    {
      path: 'analysis_options.yaml',
      content: `# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running \`flutter analyze\`.

# The following line activates a bundle of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the \`package:flutter_lints/flutter.yaml\`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the \`// ignore: name_of_lint\` and
  # \`// ignore_for_file: name_of_lint\` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the \`avoid_print\` rule
    # prefer_single_quotes: true  # Uncomment to enable the \`prefer_single_quotes\` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
`
    }
  ];

  return { files };
}

/**
 * Validates and completes a Flutter project template by ensuring all required files exist.
 * This function should be called after merging AI-generated files with the project template.
 */
export function validateAndCompleteFlutterProject(files: Array<{path: string; content: string}>, appName: string): Array<{path: string; content: string}> {
  const packageName = appName.toLowerCase().replace(/[^a-z0-9]/g, '_');
  const existingPaths = new Set(files.map(f => f.path));
  
  const requiredFiles: Array<{path: string; content: string}> = [];
  
  // Ensure pubspec.yaml exists
  if (!existingPaths.has('pubspec.yaml')) {
    requiredFiles.push({
      path: 'pubspec.yaml',
      content: `name: ${packageName}
description: "A new Flutter project generated by Genius APPio."
publish_to: 'none'

version: 1.0.0+1

environment:
  sdk: '>=3.0.0 <4.0.0'

dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.2

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0

flutter:
  uses-material-design: true
`
    });
  }
  
  // Ensure lib/main.dart exists
  if (!existingPaths.has('lib/main.dart')) {
    requiredFiles.push({
      path: 'lib/main.dart',
      content: `import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: '${appName}',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: '${appName}'),
      debugShowCheckedModeBanner: false,
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(widget.title),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              'Welcome to your new Flutter app!',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.w500),
            ),
            const SizedBox(height: 20),
            const Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ),
    );
  }
}
`
    });
  }
  
  // Ensure analysis_options.yaml exists
  if (!existingPaths.has('analysis_options.yaml')) {
    requiredFiles.push({
      path: 'analysis_options.yaml',
      content: `# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.

include: package:flutter_lints/flutter.yaml

linter:
  rules:
    # Custom lint rules can be added here
`
    });
  }
  
  // Ensure web/index.html exists (web-specific requirement)
  if (!existingPaths.has('web/index.html')) {
    requiredFiles.push({
      path: 'web/index.html',
      content: `<!DOCTYPE html>
<html>
<head>
  <base href="$FLUTTER_BASE_HREF">
  <meta charset="UTF-8">
  <meta content="IE=Edge" http-equiv="X-UA-Compatible">
  <meta name="description" content="A new Flutter project.">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  <meta name="apple-mobile-web-app-title" content="${packageName}">
  <link rel="apple-touch-icon" href="icons/Icon-192.png">
  <link rel="icon" type="image/png" href="favicon.png"/>
  <title>${packageName}</title>
  <link rel="manifest" href="manifest.json">
  <script>
    var serviceWorkerVersion = null;
  </script>
  <script src="flutter.js" defer></script>
</head>
<body>
  <script>
    window.addEventListener('load', function(ev) {
      _flutter.loader.loadEntrypoint({
        serviceWorker: {
          serviceWorkerVersion: serviceWorkerVersion,
        },
        onEntrypointLoaded: function(engineInitializer) {
          engineInitializer.initializeEngine().then(function(appRunner) {
            appRunner.runApp();
          });
        }
      });
    });
  </script>
</body>
</html>
`
    });
  }
  
  // Ensure web/manifest.json exists
  if (!existingPaths.has('web/manifest.json')) {
    requiredFiles.push({
      path: 'web/manifest.json',
      content: `{
    "name": "${appName}",
    "short_name": "${packageName}",
    "start_url": ".",
    "display": "standalone",
    "background_color": "#0175C2",
    "theme_color": "#0175C2",
    "description": "A new Flutter project.",
    "orientation": "portrait-primary",
    "prefer_related_applications": false,
    "icons": [
        {
            "src": "icons/Icon-192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-512.png",
            "sizes": "512x512",
            "type": "image/png"
        }
    ]
}
`
    });
  }
  
  // Ensure README.md exists
  if (!existingPaths.has('README.md')) {
    requiredFiles.push({
      path: 'README.md',
      content: `# ${appName}

A Flutter web application generated by Genius APPio.

## Getting Started

1. Run \`flutter pub get\` to install dependencies
2. Run \`flutter run -d chrome\` to start the app in web browser

## Features

- Modern Flutter architecture
- Material Design 3
- Responsive web layout
- Optimized for web deployment

## Platform Support

This project is currently optimized for **Web deployment only**.

- ✅ Web (Chrome, Firefox, Safari, Edge)
- 🚧 Android support (coming soon)
- 🚧 iOS support (coming soon)

## Project Structure

This project includes:
- \`web/\` - Web platform files and configuration
- \`lib/\` - Main Dart application code
- \`test/\` - Unit and widget tests

## Deployment

To build for web production:

\`\`\`bash
flutter build web
\`\`\`

The built web app will be in the \`build/web\` directory and can be served by any web server.
`
    });
  }
  
  // Return merged files (existing + any missing required files)
  return [...files, ...requiredFiles];
}

/**
 * Gets a list of critical files that must exist in a web-only Flutter project.
 * Used for validation purposes.
 */
export function getCriticalFlutterFiles(): string[] {
  return [
    'pubspec.yaml',
    'lib/main.dart',
    '.metadata',
    '.gitignore',
    'analysis_options.yaml',
    'web/index.html',
    'web/manifest.json',
    'test/widget_test.dart'
  ];
}